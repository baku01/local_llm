name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test and Analyze
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .
      
    - name: Analyze project source
      run: flutter analyze --fatal-infos
      
    - name: Run tests
      run: flutter test --coverage
      
    - name: Upload coverage to Codecov
      if: github.event_name == 'push'
      uses: codecov/codecov-action@v3
      with:
        file: coverage/lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  build:
    name: Build Applications
    needs: test
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            build-args: linux --release
            artifact-path: build/linux/x64/release/bundle/
            artifact-name: local-llm-linux
          - os: windows-latest
            platform: windows
            build-args: windows --release
            artifact-path: build/windows/x64/runner/Release/
            artifact-name: local-llm-windows
          - os: macos-latest
            platform: macos
            build-args: macos --release
            artifact-path: build/macos/Build/Products/Release/
            artifact-name: local-llm-macos
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        cache: true
        
    - name: Install Linux dependencies
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Enable platform
      run: flutter config --enable-${{ matrix.platform }}-desktop
      
    - name: Build application
      run: flutter build ${{ matrix.build-args }}
      
    - name: Create archive (Linux/macOS)
      if: matrix.platform != 'windows'
      run: |
        cd ${{ matrix.artifact-path }}
        tar -czf ${{ matrix.artifact-name }}.tar.gz *
        
    - name: Create archive (Windows)
      if: matrix.platform == 'windows'
      run: |
        cd ${{ matrix.artifact-path }}
        7z a ${{ matrix.artifact-name }}.zip *
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          ${{ matrix.artifact-path }}*.tar.gz
          ${{ matrix.artifact-path }}*.zip
        retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run dependency audit
      run: flutter pub deps --json | jq '.packages[] | select(.kind == "direct") | "\(.name):\(.version)"'
      continue-on-error: true
      
    - name: Check for known vulnerabilities
      run: |
        # Verificar se h√° depend√™ncias com vulnerabilidades conhecidas
        echo "Checking for security vulnerabilities..."
        flutter pub deps --json > deps.json
        # Aqui voc√™ pode adicionar verifica√ß√µes espec√≠ficas
        
  release:
    name: Create Release
    needs: [test, build, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      run: |
        # Gerar changelog baseado nos commits desde a √∫ltima tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -z "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" --reverse)
        else
          CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --reverse)
        fi
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Generate version
      id: version
      run: |
        # Gerar vers√£o baseada na data e hash do commit
        VERSION="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## üöÄ Release ${{ steps.version.outputs.VERSION }}
          
          ### üìù Changes
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ### üì¶ Downloads
          - **Windows**: `local-llm-windows.zip`
          - **macOS**: `local-llm-macos.tar.gz`
          - **Linux**: `local-llm-linux.tar.gz`
          
          ### üîß Installation
          1. Download the appropriate file for your platform
          2. Extract the archive
          3. Run the executable
          
          ---
          
          ü§ñ Generated with [Claude Code](https://claude.ai/code)
        files: |
          ./artifacts/**/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}