name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Check formatting
      run: |
        echo "🎨 Checking code formatting..."
        dart format --output=none --set-exit-if-changed . || {
          echo "❌ Code formatting issues found. Run 'dart format .' to fix."
          exit 1
        }
        echo "✅ Code formatting is correct"
        
    - name: Run linter
      run: |
        echo "🔍 Running linter analysis..."
        flutter analyze --fatal-infos --fatal-warnings || {
          echo "❌ Linter issues found. Please fix the issues above."
          exit 1
        }
        echo "✅ No linter issues found"
        
    - name: Check imports
      run: |
        echo "📦 Checking import organization..."
        # Verificar se os imports estão organizados
        find lib -name "*.dart" -exec grep -l "^import" {} \; | while read file; do
          # Verificar se imports externos vêm antes dos internos
          if grep -A 1000 "^import 'package:" "$file" | grep -q "^import 'dart:"; then
            echo "❌ Import order issue in $file: dart: imports should come before package: imports"
            exit 1
          fi
        done
        echo "✅ Import organization is correct"
        
    - name: Check documentation
      run: |
        echo "📚 Checking documentation coverage..."
        # Verificar se classes públicas têm documentação
        missing_docs=0
        find lib -name "*.dart" -not -path "*/test/*" | while read file; do
          # Verificar classes públicas sem documentação
          if grep -P "^class [A-Z]" "$file" | grep -v "/// " -B1 | grep -q "^class"; then
            echo "⚠️ Missing documentation in $file"
            missing_docs=$((missing_docs + 1))
          fi
        done
        
        if [ $missing_docs -gt 5 ]; then
          echo "❌ Too many classes without documentation ($missing_docs)"
          exit 1
        fi
        echo "✅ Documentation coverage is acceptable"
        
    - name: Check test coverage
      run: |
        echo "🧪 Running tests with coverage..."
        flutter test --coverage
        
        # Verificar se a cobertura mínima foi atingida
        if [ -f coverage/lcov.info ]; then
          coverage_percent=$(genhtml coverage/lcov.info -o coverage/html --quiet | grep -o '[0-9.]*%' | head -1 | sed 's/%//')
          echo "📊 Test coverage: $coverage_percent%"
          
          # Cobertura mínima de 70%
          if [ $(echo "$coverage_percent < 70" | bc -l) -eq 1 ]; then
            echo "❌ Test coverage ($coverage_percent%) is below minimum (70%)"
            exit 1
          fi
          echo "✅ Test coverage is above minimum threshold"
        else
          echo "⚠️ Coverage report not generated"
        fi
        
    - name: Complexity Analysis
      run: |
        echo "🔄 Analyzing code complexity..."
        # Verificar complexidade ciclomática usando métricas simples
        complex_files=0
        find lib -name "*.dart" | while read file; do
          # Contar estruturas de controle (if, for, while, switch, catch)
          complexity=$(grep -c -E "(if\s*\(|for\s*\(|while\s*\(|switch\s*\(|catch\s*\()" "$file" || echo 0)
          if [ $complexity -gt 15 ]; then
            echo "⚠️ High complexity in $file: $complexity control structures"
            complex_files=$((complex_files + 1))
          fi
        done
        
        if [ $complex_files -gt 3 ]; then
          echo "❌ Too many complex files ($complex_files)"
          exit 1
        fi
        echo "✅ Code complexity is within acceptable limits"
        
    - name: Check for TODOs and FIXMEs
      run: |
        echo "📝 Checking for TODOs and FIXMEs..."
        todos=$(find lib -name "*.dart" -exec grep -l "TODO\|FIXME\|HACK" {} \; | wc -l)
        if [ $todos -gt 10 ]; then
          echo "⚠️ Found $todos files with TODOs/FIXMEs"
          find lib -name "*.dart" -exec grep -Hn "TODO\|FIXME\|HACK" {} \;
        else
          echo "✅ Reasonable number of TODOs/FIXMEs found ($todos)"
        fi
        
    - name: Generate Quality Report
      if: always()
      run: |
        echo "📊 Generating quality report..."
        
        {
          echo "# 📊 Code Quality Report"
          echo ""
          echo "Generated on: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo ""
          echo "## Metrics"
          echo ""
          
          # Linhas de código
          loc=$(find lib -name "*.dart" -exec wc -l {} \; | awk '{sum += $1} END {print sum}')
          echo "- **Lines of Code**: $loc"
          
          # Número de arquivos
          files=$(find lib -name "*.dart" | wc -l)
          echo "- **Dart Files**: $files"
          
          # Número de testes
          tests=$(find test -name "*.dart" | wc -l)
          echo "- **Test Files**: $tests"
          
          # Cobertura de testes
          if [ -f coverage/lcov.info ]; then
            coverage=$(genhtml coverage/lcov.info -o coverage/html --quiet 2>/dev/null | grep -o '[0-9.]*%' | head -1 || echo "N/A")
            echo "- **Test Coverage**: $coverage"
          fi
          
          echo ""
          echo "## Quality Gates"
          echo ""
          echo "- ✅ Code Formatting"
          echo "- ✅ Linter Analysis" 
          echo "- ✅ Import Organization"
          echo "- ✅ Documentation Coverage"
          echo "- ✅ Test Coverage"
          echo "- ✅ Code Complexity"
          
        } > quality-report.md
        
    - name: Upload Quality Report
      uses: actions/upload-artifact@v3
      with:
        name: quality-report
        path: quality-report.md
        retention-days: 30