name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Versão do release (ex: v1.0.0)'
        required: true
        type: string

env:
  FLUTTER_VERSION: '3.27.0'
  FLUTTER_CHANNEL: 'stable'

jobs:
  # Job de preparação e validação
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🏷️ Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
        echo "tag=$VERSION" >> $GITHUB_OUTPUT
        echo "📋 Version: $VERSION"
        
    - name: 🐦 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: ${{ env.FLUTTER_CHANNEL }}
        cache: true
        
    - name: 📦 Install dependencies
      run: flutter pub get
      
    - name: 🧪 Run tests
      run: |
        echo "🧪 Running tests before release..."
        flutter test --reporter=expanded
        echo "✅ All tests passed!"
        
    - name: 🔍 Validate version
      run: |
        echo "🔍 Validating version in pubspec.yaml..."
        PUBSPEC_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //' | sed 's/+.*//')
        echo "Pubspec version: $PUBSPEC_VERSION"
        echo "Tag version: ${{ steps.version.outputs.version }}"
        
        if [ "$PUBSPEC_VERSION" != "${{ steps.version.outputs.version }}" ]; then
          echo "❌ Version mismatch between tag and pubspec.yaml"
          exit 1
        fi
        echo "✅ Version validation passed!"

  # Job de build para todas as plataformas
  build:
    name: Build ${{ matrix.platform }}
    needs: prepare
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos
            os: macos-latest
            build-cmd: 'flutter build macos --release'
            artifact-name: 'local_llm-macos'
            artifact-path: 'build/macos/Build/Products/Release/'
            archive-cmd: 'cd build/macos/Build/Products/Release && zip -r ../../../../../local_llm-macos.zip local_llm.app'
            archive-file: 'local_llm-macos.zip'
          - platform: windows
            os: windows-latest
            build-cmd: 'flutter build windows --release'
            artifact-name: 'local_llm-windows'
            artifact-path: 'build/windows/x64/runner/Release/'
            archive-cmd: 'cd build/windows/x64/runner/Release && 7z a ../../../../../local_llm-windows.zip *'
            archive-file: 'local_llm-windows.zip'
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🐦 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: ${{ env.FLUTTER_CHANNEL }}
        cache: true
        
    - name: 📦 Install dependencies
      run: flutter pub get
      
    - name: 🔧 Enable desktop support
      run: |
        flutter config --enable-macos-desktop
        flutter config --enable-windows-desktop
        
    - name: 🏗️ Build ${{ matrix.platform }}
      run: ${{ matrix.build-cmd }}
      
    - name: 📦 Create archive
      run: ${{ matrix.archive-cmd }}
      
    - name: 📤 Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ${{ matrix.archive-file }}
        retention-days: 90

  # Job de criação do release
  release:
    name: Create Release
    needs: [prepare, build]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📥 Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: 📋 Generate changelog
      id: changelog
      run: |
        echo "📋 Generating changelog..."
        
        # Obter a tag anterior
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "📊 Changes since $PREVIOUS_TAG:"
          CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
        else
          echo "📊 Initial release"
          CHANGELOG="- Initial release of Local LLM Desktop Application"
        fi
        
        # Criar changelog formatado
        cat > CHANGELOG.md << EOF
        ## 🚀 Local LLM v${{ needs.prepare.outputs.version }}
        
        ### 📱 Aplicação Desktop para LLMs Locais
        
        Esta versão inclui:
        
        ### 🔄 Mudanças:
        $CHANGELOG
        
        ### 📦 Downloads Disponíveis:
        - **macOS**: local_llm-macos.zip
        - **Windows**: local_llm-windows.zip
        
        ### 📋 Requisitos do Sistema:
        - **macOS**: macOS 10.14 ou superior
        - **Windows**: Windows 10 ou superior
        - **Ollama**: Necessário para executar modelos LLM locais
        
        ### 🛠️ Instalação:
        1. Baixe o arquivo correspondente ao seu sistema operacional
        2. Extraia o arquivo
        3. Execute o aplicativo
        4. Certifique-se de que o Ollama está instalado e rodando
        
        ### 🐛 Problemas Conhecidos:
        - Consulte as [Issues](https://github.com/${{ github.repository }}/issues) para problemas conhecidos
        
        ---
        
        **Versão completa**: ${{ needs.prepare.outputs.tag }}  
        **Data de build**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")  
        **Commit**: ${{ github.sha }}
        EOF
        
    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare.outputs.tag }}
        name: 'Local LLM v${{ needs.prepare.outputs.version }}'
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(needs.prepare.outputs.version, '-') }}
        files: |
          artifacts/local_llm-macos/local_llm-macos.zip
          artifacts/local_llm-windows/local_llm-windows.zip
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📢 Release Summary
      run: |
        echo "🎉 Release criado com sucesso!"
        echo "📋 Tag: ${{ needs.prepare.outputs.tag }}"
        echo "📦 Versão: ${{ needs.prepare.outputs.version }}"
        echo "🔗 URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare.outputs.tag }}"

  # Job de notificação pós-release
  notify:
    name: Post-Release Notifications
    needs: [prepare, release]
    runs-on: ubuntu-latest
    if: always() && needs.release.result == 'success'
    
    steps:
    - name: 📢 Success notification
      run: |
        echo "✅ Release ${{ needs.prepare.outputs.tag }} criado com sucesso!"
        echo "🎯 Próximos passos:"
        echo "  - Verificar downloads funcionando"
        echo "  - Atualizar documentação se necessário"
        echo "  - Comunicar release aos usuários"