name: Security & Dependencies

on:
  schedule:
    # Executa toda segunda-feira às 9:00 UTC
    - cron: '0 9 * * 1'
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.24.3'

jobs:
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Check for outdated dependencies
      run: |
        echo "📦 Verificando dependências desatualizadas..."
        flutter pub outdated || true
        
    - name: Audit dependencies
      run: |
        echo "🔍 Auditando dependências..."
        dart pub deps --style=compact
        
    - name: Check for unused dependencies
      run: |
        echo "🧹 Verificando dependências não utilizadas..."
        flutter pub deps --unused || true

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run detailed analysis
      run: |
        echo "🔍 Executando análise detalhada do código..."
        dart analyze --verbose
        
    - name: Check code metrics
      run: |
        echo "📊 Verificando métricas do código..."
        find lib -name '*.dart' -exec wc -l {} + | sort -n
        echo "📁 Estrutura do projeto:"
        tree lib/ -I '__pycache__|*.pyc|node_modules' || find lib -type f -name '*.dart' | head -20
        
    - name: Verify Clean Architecture
      run: |
        echo "🏛️ Verificando aderência à Clean Architecture..."
        echo "Domain layer files:"
        find lib/domain -name '*.dart' | wc -l
        echo "Data layer files:"
        find lib/data -name '*.dart' | wc -l
        echo "Presentation layer files:"
        find lib/presentation -name '*.dart' | wc -l
        echo "Core layer files:"
        find lib/core -name '*.dart' | wc -l

  performance-check:
    name: Performance Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        cache: true
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Build size analysis
      run: |
        echo "📏 Analisando tamanho do build..."
        flutter build linux --release --analyze-size
        
    - name: Check for performance anti-patterns
      run: |
        echo "⚡ Verificando anti-padrões de performance..."
        # Procura por possíveis problemas de performance
        echo "Verificando uso de setState desnecessário:"
        grep -r "setState" lib/ --include="*.dart" | wc -l || true
        echo "Verificando widgets não const:"
        grep -r "Widget build" lib/ --include="*.dart" | grep -v "const" | wc -l || true
        
  documentation-check:
    name: Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation coverage
      run: |
        echo "📚 Verificando cobertura de documentação..."
        echo "Arquivos Dart com documentação:"
        grep -r "///" lib/ --include="*.dart" | cut -d: -f1 | sort | uniq | wc -l || true
        echo "Total de arquivos Dart:"
        find lib/ -name "*.dart" | wc -l
        
    - name: Verify README completeness
      run: |
        echo "📖 Verificando completude do README..."
        if [ -f README.md ]; then
          echo "✅ README.md existe"
          echo "Seções encontradas:"
          grep "^#" README.md | head -10
          echo "Tamanho do README: $(wc -l < README.md) linhas"
        else
          echo "❌ README.md não encontrado"
          exit 1
        fi
        
    - name: Check for TODO comments
      run: |
        echo "📝 Verificando comentários TODO pendentes..."
        grep -r "TODO\|FIXME\|HACK" lib/ --include="*.dart" || echo "✅ Nenhum TODO encontrado"

  security-summary:
    name: Security Summary
    needs: [dependency-check, code-quality, performance-check, documentation-check]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Security Report
      run: |
        echo "🛡️ RELATÓRIO DE SEGURANÇA E QUALIDADE"
        echo "======================================"
        echo "✅ Verificação de dependências: ${{ needs.dependency-check.result }}"
        echo "✅ Análise de qualidade: ${{ needs.code-quality.result }}"
        echo "✅ Verificação de performance: ${{ needs.performance-check.result }}"
        echo "✅ Verificação de documentação: ${{ needs.documentation-check.result }}"
        echo ""
        echo "📊 Status geral: $(if [ '${{ needs.dependency-check.result }}' = 'success' ] && [ '${{ needs.code-quality.result }}' = 'success' ] && [ '${{ needs.performance-check.result }}' = 'success' ] && [ '${{ needs.documentation-check.result }}' = 'success' ]; then echo '🟢 APROVADO'; else echo '🔴 REQUER ATENÇÃO'; fi)"
        echo "🕒 Data da verificação: $(date)"
        echo "🔗 Commit: ${{ github.sha }}"