// Mocks generated by Mockito 5.4.6 from annotations
// in local_llm/test/unit/controllers/llm_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:local_llm/domain/entities/llm_model.dart' as _i7;
import 'package:local_llm/domain/entities/llm_response.dart' as _i3;
import 'package:local_llm/domain/entities/search_result.dart' as _i11;
import 'package:local_llm/domain/repositories/llm_repository.dart' as _i2;
import 'package:local_llm/domain/repositories/search_repository.dart' as _i4;
import 'package:local_llm/domain/usecases/generate_response.dart' as _i8;
import 'package:local_llm/domain/usecases/generate_response_stream.dart' as _i9;
import 'package:local_llm/domain/usecases/get_available_models.dart' as _i5;
import 'package:local_llm/domain/usecases/search_web.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLlmRepository_0 extends _i1.SmartFake implements _i2.LlmRepository {
  _FakeLlmRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLlmResponse_1 extends _i1.SmartFake implements _i3.LlmResponse {
  _FakeLlmResponse_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSearchRepository_2 extends _i1.SmartFake
    implements _i4.SearchRepository {
  _FakeSearchRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetAvailableModels].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAvailableModels extends _i1.Mock
    implements _i5.GetAvailableModels {
  MockGetAvailableModels() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LlmRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeLlmRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.LlmRepository);

  @override
  _i6.Future<List<_i7.LlmModel>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i6.Future<List<_i7.LlmModel>>.value(<_i7.LlmModel>[]),
          )
          as _i6.Future<List<_i7.LlmModel>>);
}

/// A class which mocks [GenerateResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenerateResponse extends _i1.Mock implements _i8.GenerateResponse {
  MockGenerateResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LlmRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeLlmRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.LlmRepository);

  @override
  _i6.Future<_i3.LlmResponse> call({
    required String? prompt,
    required String? modelName,
    bool? stream = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #prompt: prompt,
              #modelName: modelName,
              #stream: stream,
            }),
            returnValue: _i6.Future<_i3.LlmResponse>.value(
              _FakeLlmResponse_1(
                this,
                Invocation.method(#call, [], {
                  #prompt: prompt,
                  #modelName: modelName,
                  #stream: stream,
                }),
              ),
            ),
          )
          as _i6.Future<_i3.LlmResponse>);
}

/// A class which mocks [GenerateResponseStream].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenerateResponseStream extends _i1.Mock
    implements _i9.GenerateResponseStream {
  MockGenerateResponseStream() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LlmRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeLlmRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.LlmRepository);

  @override
  _i6.Stream<String> call({
    required String? prompt,
    required String? modelName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #prompt: prompt,
              #modelName: modelName,
            }),
            returnValue: _i6.Stream<String>.empty(),
          )
          as _i6.Stream<String>);
}

/// A class which mocks [SearchWeb].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchWeb extends _i1.Mock implements _i10.SearchWeb {
  MockSearchWeb() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.SearchRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeSearchRepository_2(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i4.SearchRepository);

  @override
  _i6.Future<List<_i11.SearchResult>> call(_i11.SearchQuery? query) =>
      (super.noSuchMethod(
            Invocation.method(#call, [query]),
            returnValue: _i6.Future<List<_i11.SearchResult>>.value(
              <_i11.SearchResult>[],
            ),
          )
          as _i6.Future<List<_i11.SearchResult>>);
}
